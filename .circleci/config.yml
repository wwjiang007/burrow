# Some resuable sections, note the top-level keys 'defaults' and 'tag_filters'
# have no special meaning, they just exist so I can alias them and import them
# in later blocks
defaults: &defaults
  working_directory: /go/src/github.com/hyperledger/burrow
  docker:
    - image: hyperledger/burrow:ci
  environment:
    - GO_TEST_ARGS: -p 2

tag_filters: &tags_filters
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

setup_docker: &setup_docker
  version: 17.11.0-ce

orbs:
  codecov: codecov/codecov@1.0.4

version: 2.1
jobs:

  test:
    <<: *defaults
    steps:
      - run: echo $CIRCLE_PULL_REQUESTS
      - run: echo $CIRCLE_BRANCH
      - checkout
      - run: make test
      # In case we miss compile errors not pulled into test paths
      - run: make build

  test_cover:
    <<: *defaults
    steps:
      - checkout
      - run: make test_cover
      - codecov/upload:
          file: coverage.html

  test_js:
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      # js tests do not need to in docker, however nodejs crashes
      # while running mocha when not using image above (not OOM).
      # above image needs newer go so docker is used.
      - run: docker-compose run burrow make npm_install test_js

  test_integration:
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - run: docker-compose run burrow make test_integration_no_postgres

  build_docker:
    <<: *defaults
    steps:
      - checkout
        # This allows us to perform our docker builds
      - setup_remote_docker:
          <<: *setup_docker
        # build docker image and tag the docker image(s) depending on branch/tag
      - run: make docker_build

  release_dev:
    <<: *defaults
    steps:
      - setup_remote_docker:
          <<: *setup_docker
      - checkout
      - run: make release_dev

  release:
    <<: *defaults
    steps:
      - setup_remote_docker:
          <<: *setup_docker
      - checkout
      - run: make release


workflows:

  test_and_release:
    jobs:
      - test:
          filters:
            <<: *tags_filters

      - test_cover:
          filters:
            branches:
              only: develop

      - test_integration:
          filters:
            <<: *tags_filters

      - test_js:
          filters:
            <<: *tags_filters

      - build_docker:
          filters:
            # tags filters and branch filters are applied disjunctively, so we
            # will still build tags not on develop (i.e. including tagged
            # releases on master that we specifically want to build)
            <<: *tags_filters

      - release_dev:
          requires:
          - test
          - test_integration
          - test_js
          filters:
            branches:
              only: develop

      - release:
          requires:
          - test
          - test_integration
          - test_js
          filters:
            <<: *tags_filters
            branches:
              ignore: /.*/
